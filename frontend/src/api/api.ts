/* tslint:disable */
/* eslint-disable */
/**
 * API for the ZET-O-MAP Graph Viewer
 * A set of methods for retrieving data for visualizing in the ZET-O-MAP GUI.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AopKeyEvents
 */
export interface AopKeyEvents {
    /**
     * 
     * @type {Array<string>}
     * @memberof AopKeyEvents
     */
    'kes': Array<string>;
}
/**
 * 
 * @export
 * @interface BaseResponse
 */
export interface BaseResponse {
    /**
     * 
     * @type {Array<Node>}
     * @memberof BaseResponse
     */
    'nodes': Array<Node>;
    /**
     * 
     * @type {Array<Edge>}
     * @memberof BaseResponse
     */
    'edges': Array<Edge>;
    /**
     * 
     * @type {object | null}
     * @memberof BaseResponse
     */
    'ke_gene_data': object | null;
}
/**
 * 
 * @export
 * @interface Compound
 */
export interface Compound {
    /**
     * 
     * @type {string}
     * @memberof Compound
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Compound
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Edge
 */
export interface Edge {
    /**
     * 
     * @type {string}
     * @memberof Edge
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Edge
     */
    'source': string;
    /**
     * 
     * @type {string}
     * @memberof Edge
     */
    'target': string;
}
/**
 * 
 * @export
 * @interface ExpResponse
 */
export interface ExpResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ExpResponse
     */
    'tested': Array<string>;
    /**
     * 
     * @type {Array<ExpResult>}
     * @memberof ExpResponse
     */
    'exp': Array<ExpResult>;
}
/**
 * 
 * @export
 * @interface ExpResult
 */
export interface ExpResult {
    /**
     * 
     * @type {string}
     * @memberof ExpResult
     */
    'compound': string;
    /**
     * 
     * @type {string}
     * @memberof ExpResult
     */
    'ensembl': string;
    /**
     * 
     * @type {number | null}
     * @memberof ExpResult
     */
    'log2fc': number | null;
    /**
     * 
     * @type {number | null}
     * @memberof ExpResult
     */
    'pvalue': number | null;
    /**
     * 
     * @type {number | null}
     * @memberof ExpResult
     */
    'padj': number | null;
    /**
     * 
     * @type {string | null}
     * @memberof ExpResult
     */
    'zfinid': string | null;
    /**
     * 
     * @type {string | null}
     * @memberof ExpResult
     */
    'zfin': string | null;
    /**
     * 
     * @type {number | null}
     * @memberof ExpResult
     */
    'key': number | null;
    /**
     * 
     * @type {number | null}
     * @memberof ExpResult
     */
    'timepoint': number | null;
    /**
     * 
     * @type {number | null}
     * @memberof ExpResult
     */
    'concentration': number | null;
}
/**
 * 
 * @export
 * @interface Genes
 */
export interface Genes {
    /**
     * 
     * @type {Array<string>}
     * @memberof Genes
     */
    'genes': Array<string>;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Node
 */
export interface Node {
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'node_type': string;
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string | number>}
     * @memberof ValidationError
     */
    'loc': Array<string | number>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * ExperimentApi - axios parameter creator
 * @export
 */
export const ExperimentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return the experimentally significant genes that are also associated with the given Key Event node ID.  Parameters ---------- ke_node_id :  str     Key Event ID of node in graph.  Returns ------- dict     Table of experimental evidence for associated genes.
         * @summary Get Exp Genes
         * @param {string | number} keNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpGenesExpKeNodeIdGet: async (keNodeId: string | number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keNodeId' is not null or undefined
            assertParamExists('getExpGenesExpKeNodeIdGet', 'keNodeId', keNodeId)
            const localVarPath = `/exp/{ke_node_id}`
                .replace(`{${"ke_node_id"}}`, encodeURIComponent(String(keNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperimentApi - functional programming interface
 * @export
 */
export const ExperimentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperimentApiAxiosParamCreator(configuration)
    return {
        /**
         * Return the experimentally significant genes that are also associated with the given Key Event node ID.  Parameters ---------- ke_node_id :  str     Key Event ID of node in graph.  Returns ------- dict     Table of experimental evidence for associated genes.
         * @summary Get Exp Genes
         * @param {string | number} keNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExpGenesExpKeNodeIdGet(keNodeId: string | number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExpGenesExpKeNodeIdGet(keNodeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExperimentApi - factory interface
 * @export
 */
export const ExperimentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperimentApiFp(configuration)
    return {
        /**
         * Return the experimentally significant genes that are also associated with the given Key Event node ID.  Parameters ---------- ke_node_id :  str     Key Event ID of node in graph.  Returns ------- dict     Table of experimental evidence for associated genes.
         * @summary Get Exp Genes
         * @param {string | number} keNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpGenesExpKeNodeIdGet(keNodeId: string | number, options?: any): AxiosPromise<ExpResponse> {
            return localVarFp.getExpGenesExpKeNodeIdGet(keNodeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperimentApi - object-oriented interface
 * @export
 * @class ExperimentApi
 * @extends {BaseAPI}
 */
export class ExperimentApi extends BaseAPI {
    /**
     * Return the experimentally significant genes that are also associated with the given Key Event node ID.  Parameters ---------- ke_node_id :  str     Key Event ID of node in graph.  Returns ------- dict     Table of experimental evidence for associated genes.
     * @summary Get Exp Genes
     * @param {string | number} keNodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentApi
     */
    public getExpGenesExpKeNodeIdGet(keNodeId: string | number, options?: AxiosRequestConfig) {
        return ExperimentApiFp(this.configuration).getExpGenesExpKeNodeIdGet(keNodeId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PredictApi - axios parameter creator
 * @export
 */
export const PredictApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the predicted AOP & KeyEvent nodes and edges a list of porvided genes.  Parameters ---------- gene_dict :  Genes     Dict of genes to use for prediction.  limit : str     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
         * @summary Get Kes And Aops From Gene List
         * @param {Genes} genes 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKesAndAopsFromGeneListPredictGenesPost: async (genes: Genes, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'genes' is not null or undefined
            assertParamExists('getKesAndAopsFromGeneListPredictGenesPost', 'genes', genes)
            const localVarPath = `/predict/genes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(genes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the predicted AOP & KeyEvent nodes and edges using the gene expression data for a given compound.  Parameters ---------- compound_id : str     ID of compound used in the database: 1 = Valproic Acid, 2 = Triadimefon  limit : int     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
         * @summary Get Omics Kes And Aops
         * @param {string} compoundId 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOmicsKesAndAopsPredictOmicsCompoundIdGet: async (compoundId: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compoundId' is not null or undefined
            assertParamExists('getOmicsKesAndAopsPredictOmicsCompoundIdGet', 'compoundId', compoundId)
            const localVarPath = `/predict/omics/{compound_id}`
                .replace(`{${"compound_id"}}`, encodeURIComponent(String(compoundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the predicted AOP & KeyEvent nodes and edges using the PCR results of a given compound.  Parameters ---------- compound_id :  str     ID of compound used in the database: 2 = VPA, 3 = Chlorpyrifos, 4 = Tridimefon  concentration : str     Concentration of the compound used. If none provided, returns all data for all concentrations tested.  limit : int     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
         * @summary Get Pcr Kes And Aops
         * @param {string} compoundId 
         * @param {string | number} [concentration] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPcrKesAndAopsPredictPcrCompoundIdGet: async (compoundId: string, concentration?: string | number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compoundId' is not null or undefined
            assertParamExists('getPcrKesAndAopsPredictPcrCompoundIdGet', 'compoundId', compoundId)
            const localVarPath = `/predict/pcr/{compound_id}`
                .replace(`{${"compound_id"}}`, encodeURIComponent(String(compoundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (concentration !== undefined) {
                localVarQueryParameter['concentration'] = concentration;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the predicted AOP & KeyEvent nodes and edges using the sensitive gene list of a given compound.  Parameters ---------- compound_id :  str     ID of compound used in the database: 1 = Chlorpyrifos, 2 = Triadimefon, 3 = VPA  limit : int     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
         * @summary Get Sensitive Kes And Aops
         * @param {string} compoundId 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSensitiveKesAndAopsPredictSensitiveCompoundIdGet: async (compoundId: string, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'compoundId' is not null or undefined
            assertParamExists('getSensitiveKesAndAopsPredictSensitiveCompoundIdGet', 'compoundId', compoundId)
            const localVarPath = `/predict/sensitive/{compound_id}`
                .replace(`{${"compound_id"}}`, encodeURIComponent(String(compoundId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PredictApi - functional programming interface
 * @export
 */
export const PredictApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PredictApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the predicted AOP & KeyEvent nodes and edges a list of porvided genes.  Parameters ---------- gene_dict :  Genes     Dict of genes to use for prediction.  limit : str     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
         * @summary Get Kes And Aops From Gene List
         * @param {Genes} genes 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getKesAndAopsFromGeneListPredictGenesPost(genes: Genes, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getKesAndAopsFromGeneListPredictGenesPost(genes, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the predicted AOP & KeyEvent nodes and edges using the gene expression data for a given compound.  Parameters ---------- compound_id : str     ID of compound used in the database: 1 = Valproic Acid, 2 = Triadimefon  limit : int     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
         * @summary Get Omics Kes And Aops
         * @param {string} compoundId 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOmicsKesAndAopsPredictOmicsCompoundIdGet(compoundId: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOmicsKesAndAopsPredictOmicsCompoundIdGet(compoundId, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the predicted AOP & KeyEvent nodes and edges using the PCR results of a given compound.  Parameters ---------- compound_id :  str     ID of compound used in the database: 2 = VPA, 3 = Chlorpyrifos, 4 = Tridimefon  concentration : str     Concentration of the compound used. If none provided, returns all data for all concentrations tested.  limit : int     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
         * @summary Get Pcr Kes And Aops
         * @param {string} compoundId 
         * @param {string | number} [concentration] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPcrKesAndAopsPredictPcrCompoundIdGet(compoundId: string, concentration?: string | number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPcrKesAndAopsPredictPcrCompoundIdGet(compoundId, concentration, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the predicted AOP & KeyEvent nodes and edges using the sensitive gene list of a given compound.  Parameters ---------- compound_id :  str     ID of compound used in the database: 1 = Chlorpyrifos, 2 = Triadimefon, 3 = VPA  limit : int     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
         * @summary Get Sensitive Kes And Aops
         * @param {string} compoundId 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSensitiveKesAndAopsPredictSensitiveCompoundIdGet(compoundId: string, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSensitiveKesAndAopsPredictSensitiveCompoundIdGet(compoundId, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PredictApi - factory interface
 * @export
 */
export const PredictApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PredictApiFp(configuration)
    return {
        /**
         * Get the predicted AOP & KeyEvent nodes and edges a list of porvided genes.  Parameters ---------- gene_dict :  Genes     Dict of genes to use for prediction.  limit : str     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
         * @summary Get Kes And Aops From Gene List
         * @param {Genes} genes 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getKesAndAopsFromGeneListPredictGenesPost(genes: Genes, limit?: number, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.getKesAndAopsFromGeneListPredictGenesPost(genes, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the predicted AOP & KeyEvent nodes and edges using the gene expression data for a given compound.  Parameters ---------- compound_id : str     ID of compound used in the database: 1 = Valproic Acid, 2 = Triadimefon  limit : int     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
         * @summary Get Omics Kes And Aops
         * @param {string} compoundId 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOmicsKesAndAopsPredictOmicsCompoundIdGet(compoundId: string, limit?: number, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.getOmicsKesAndAopsPredictOmicsCompoundIdGet(compoundId, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the predicted AOP & KeyEvent nodes and edges using the PCR results of a given compound.  Parameters ---------- compound_id :  str     ID of compound used in the database: 2 = VPA, 3 = Chlorpyrifos, 4 = Tridimefon  concentration : str     Concentration of the compound used. If none provided, returns all data for all concentrations tested.  limit : int     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
         * @summary Get Pcr Kes And Aops
         * @param {string} compoundId 
         * @param {string | number} [concentration] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPcrKesAndAopsPredictPcrCompoundIdGet(compoundId: string, concentration?: string | number, limit?: number, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.getPcrKesAndAopsPredictPcrCompoundIdGet(compoundId, concentration, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the predicted AOP & KeyEvent nodes and edges using the sensitive gene list of a given compound.  Parameters ---------- compound_id :  str     ID of compound used in the database: 1 = Chlorpyrifos, 2 = Triadimefon, 3 = VPA  limit : int     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
         * @summary Get Sensitive Kes And Aops
         * @param {string} compoundId 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSensitiveKesAndAopsPredictSensitiveCompoundIdGet(compoundId: string, limit?: number, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.getSensitiveKesAndAopsPredictSensitiveCompoundIdGet(compoundId, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PredictApi - object-oriented interface
 * @export
 * @class PredictApi
 * @extends {BaseAPI}
 */
export class PredictApi extends BaseAPI {
    /**
     * Get the predicted AOP & KeyEvent nodes and edges a list of porvided genes.  Parameters ---------- gene_dict :  Genes     Dict of genes to use for prediction.  limit : str     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
     * @summary Get Kes And Aops From Gene List
     * @param {Genes} genes 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PredictApi
     */
    public getKesAndAopsFromGeneListPredictGenesPost(genes: Genes, limit?: number, options?: AxiosRequestConfig) {
        return PredictApiFp(this.configuration).getKesAndAopsFromGeneListPredictGenesPost(genes, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the predicted AOP & KeyEvent nodes and edges using the gene expression data for a given compound.  Parameters ---------- compound_id : str     ID of compound used in the database: 1 = Valproic Acid, 2 = Triadimefon  limit : int     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
     * @summary Get Omics Kes And Aops
     * @param {string} compoundId 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PredictApi
     */
    public getOmicsKesAndAopsPredictOmicsCompoundIdGet(compoundId: string, limit?: number, options?: AxiosRequestConfig) {
        return PredictApiFp(this.configuration).getOmicsKesAndAopsPredictOmicsCompoundIdGet(compoundId, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the predicted AOP & KeyEvent nodes and edges using the PCR results of a given compound.  Parameters ---------- compound_id :  str     ID of compound used in the database: 2 = VPA, 3 = Chlorpyrifos, 4 = Tridimefon  concentration : str     Concentration of the compound used. If none provided, returns all data for all concentrations tested.  limit : int     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
     * @summary Get Pcr Kes And Aops
     * @param {string} compoundId 
     * @param {string | number} [concentration] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PredictApi
     */
    public getPcrKesAndAopsPredictPcrCompoundIdGet(compoundId: string, concentration?: string | number, limit?: number, options?: AxiosRequestConfig) {
        return PredictApiFp(this.configuration).getPcrKesAndAopsPredictPcrCompoundIdGet(compoundId, concentration, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the predicted AOP & KeyEvent nodes and edges using the sensitive gene list of a given compound.  Parameters ---------- compound_id :  str     ID of compound used in the database: 1 = Chlorpyrifos, 2 = Triadimefon, 3 = VPA  limit : int     Number of AOPs to limit the results to  Returns ------- dict     Nodes and edges of the associated KEs and AOPs.
     * @summary Get Sensitive Kes And Aops
     * @param {string} compoundId 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PredictApi
     */
    public getSensitiveKesAndAopsPredictSensitiveCompoundIdGet(compoundId: string, limit?: number, options?: AxiosRequestConfig) {
        return PredictApiFp(this.configuration).getSensitiveKesAndAopsPredictSensitiveCompoundIdGet(compoundId, limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * QueryApi - axios parameter creator
 * @export
 */
export const QueryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return a list of KEs for a given AOP ID.  Parameters ---------- aop_node_id : str     AOP ID of node in graph.  Returns ------- dict     List of associated KEs.
         * @summary Get Aop Kes
         * @param {string | number} aopNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAopKesKesAopNodeIdGet: async (aopNodeId: string | number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aopNodeId' is not null or undefined
            assertParamExists('getAopKesKesAopNodeIdGet', 'aopNodeId', aopNodeId)
            const localVarPath = `/kes/{aop_node_id}`
                .replace(`{${"aop_node_id"}}`, encodeURIComponent(String(aopNodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the base/starting graph for a given keyword. If no keyword is given, returns links to all resources.
         * @summary Get Base Graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaseGraphResultsBaseGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/results/base`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of compounds in the database for which there is experimental data.
         * @summary Get Compounds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompoundsResultsCompoundsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/results/compounds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the next nodes of the given node rID.  Parameters ---------- node_id :  str     ID of node in graph.  Returns ------- dict     List of node IDs coming out of given node ID.
         * @summary Get Next Nodes
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextNodesResultsNodeIdGet: async (nodeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            assertParamExists('getNextNodesResultsNodeIdGet', 'nodeId', nodeId)
            const localVarPath = `/results/{node_id}`
                .replace(`{${"node_id"}}`, encodeURIComponent(String(nodeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueryApi - functional programming interface
 * @export
 */
export const QueryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QueryApiAxiosParamCreator(configuration)
    return {
        /**
         * Return a list of KEs for a given AOP ID.  Parameters ---------- aop_node_id : str     AOP ID of node in graph.  Returns ------- dict     List of associated KEs.
         * @summary Get Aop Kes
         * @param {string | number} aopNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAopKesKesAopNodeIdGet(aopNodeId: string | number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AopKeyEvents>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAopKesKesAopNodeIdGet(aopNodeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return the base/starting graph for a given keyword. If no keyword is given, returns links to all resources.
         * @summary Get Base Graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBaseGraphResultsBaseGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBaseGraphResultsBaseGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return a list of compounds in the database for which there is experimental data.
         * @summary Get Compounds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompoundsResultsCompoundsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Compound>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompoundsResultsCompoundsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return the next nodes of the given node rID.  Parameters ---------- node_id :  str     ID of node in graph.  Returns ------- dict     List of node IDs coming out of given node ID.
         * @summary Get Next Nodes
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNextNodesResultsNodeIdGet(nodeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNextNodesResultsNodeIdGet(nodeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QueryApi - factory interface
 * @export
 */
export const QueryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QueryApiFp(configuration)
    return {
        /**
         * Return a list of KEs for a given AOP ID.  Parameters ---------- aop_node_id : str     AOP ID of node in graph.  Returns ------- dict     List of associated KEs.
         * @summary Get Aop Kes
         * @param {string | number} aopNodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAopKesKesAopNodeIdGet(aopNodeId: string | number, options?: any): AxiosPromise<AopKeyEvents> {
            return localVarFp.getAopKesKesAopNodeIdGet(aopNodeId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the base/starting graph for a given keyword. If no keyword is given, returns links to all resources.
         * @summary Get Base Graph
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaseGraphResultsBaseGet(options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.getBaseGraphResultsBaseGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of compounds in the database for which there is experimental data.
         * @summary Get Compounds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompoundsResultsCompoundsGet(options?: any): AxiosPromise<Array<Compound>> {
            return localVarFp.getCompoundsResultsCompoundsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Return the next nodes of the given node rID.  Parameters ---------- node_id :  str     ID of node in graph.  Returns ------- dict     List of node IDs coming out of given node ID.
         * @summary Get Next Nodes
         * @param {string} nodeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNextNodesResultsNodeIdGet(nodeId: string, options?: any): AxiosPromise<BaseResponse> {
            return localVarFp.getNextNodesResultsNodeIdGet(nodeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
export class QueryApi extends BaseAPI {
    /**
     * Return a list of KEs for a given AOP ID.  Parameters ---------- aop_node_id : str     AOP ID of node in graph.  Returns ------- dict     List of associated KEs.
     * @summary Get Aop Kes
     * @param {string | number} aopNodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public getAopKesKesAopNodeIdGet(aopNodeId: string | number, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).getAopKesKesAopNodeIdGet(aopNodeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the base/starting graph for a given keyword. If no keyword is given, returns links to all resources.
     * @summary Get Base Graph
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public getBaseGraphResultsBaseGet(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).getBaseGraphResultsBaseGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of compounds in the database for which there is experimental data.
     * @summary Get Compounds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public getCompoundsResultsCompoundsGet(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).getCompoundsResultsCompoundsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the next nodes of the given node rID.  Parameters ---------- node_id :  str     ID of node in graph.  Returns ------- dict     List of node IDs coming out of given node ID.
     * @summary Get Next Nodes
     * @param {string} nodeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public getNextNodesResultsNodeIdGet(nodeId: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).getNextNodesResultsNodeIdGet(nodeId, options).then((request) => request(this.axios, this.basePath));
    }
}


